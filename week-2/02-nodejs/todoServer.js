/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */ 
  const fs = require("fs");
  const express = require('express');
  const bodyParser = require('body-parser');
  
  const app = express();
  // let todos = [];
  let availableId = 0;

  function generateTaskId(){
    availableId ++;
    console.log(availableId);
    return availableId;
  }
  app.use(bodyParser.json());
  
  app.get("/todos", (request, response) => {
    fs.readFile("todos.json", "utf-8", (err, data) => {
      if(err){
        throw err;
      }
      let todos = JSON.parse(data);
      response.status(200).json(todos);
    })
  });
  app.get("/todos/:id", (request, response) => {
    fs.readFile("todos.json", "utf-8", (err, data) => {
      if(err){
        throw err;
      }
      let todos = JSON.parse(data);
      const requiredId = request.params.id;
      const task = todos.find((task) => task.id == parseInt(requiredId));
      if(task){
        response.status(200).json(task);
      }
      else{
        response.status(404).json({
          msg : "No such task exists"
        });
      }
    })
  });

  app.post("/todos", (req, res) => {
    fs.readFile("todos.json", "utf-8", (err, data) => {
      if(err){
        throw err;
      }
      let todos = JSON.parse(data);
      const newTask = {
        id : generateTaskId(),
        title : req.body.title,
        description : req.body.description
      };

      todos.push(newTask);
      fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
        if(err) throw err;
        res.status(201).json(newTask);
      })
    })
  });
  app.put("/todos/:id", (req, res) => {
    fs.readFile("todos.json", "utf-8", (err, data) => {
      if(err){
        throw err;
      }
      let todos = JSON.parse(data);
      const originalTask = todos.filter((task) => task.id == parseInt(req.params.id));

      if(originalTask.length != 0){
        const id = req.params.id;
        const updatedFields = req.body;
        const updatedTask = {
          id : id,
          title : updatedFields.title,
          description : updatedFields.description
        }
        todos = todos.filter((task) => task.id != id);
        todos.push(updatedTask);
        fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
          if(err) throw err;
          res.status(200).json({
            msg : "Updated"
          });
        })
      }
      else{
        res.status(404).json({
          msg: "No such task exists"
        });
      }
    })
  });

  app.delete("/todos/:id", (req, res) => {
    fs.readFile("todos.json", "utf-8", (err, data) => {
      if(err){
        throw err;
      }
      let todos = JSON.parse(data);
      const id = req.params.id;
      let originalLength = todos.length;
      todos = todos.filter((task) => task.id != id);
      if(todos.length == originalLength){
        res.status(404).json({
          msg:"No such task exists"
        });
      }
      else{
        fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
          if(err) throw err;
          res.status(200).json({
            msg : "Task deleted with id:" + id
          })
        })
      }
    })
  });

  // app.listen(3000);
  app.use((req, res, next) => {
    res.status(404).send("Incorrect route")
  })
  module.exports = app;